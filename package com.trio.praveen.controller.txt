package com.trio.praveen.controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.trio.praveen.entity.Ticket;
import com.trio.praveen.service.TicketService;
@RestController
//This class will be registered to DispatcherServlet

@RequestMapping(value = "/tickets") // http://loclahost:8080/tickets

//When ever we hit http://loclahost:8080/tickets ==> DispatcherServlet initialize TicketController

//TicketController ticketController = ioc.getTicketController();
public class TicketController
{
	// Complete RestController is designed with JAX - RS FRAMEWORK

	// JAX - RS ==> Java API for XML Rest Services

	// Java implemented web services framework through JAX - WS and JAX - RS
	// technologies

	// web services ==> Cross Language Interaction ==> Heterogeneous Interoporable
	// Communication media

	// JAX - WS ==> SOAP ==> Java API for XML WebServices

	// AIRTEL ==> prepaid , postpaid , promotions, Discounts, Tariffs, Bill plans,
	// payments
	// ==>New Upcoming strategies, customer ratings ....

	// promotions, Discounts, Tariffs ==> Main Frames
	// Bill plans, payments ==> SAP System
	// New Upcoming plans, strategies ==> AI
	// Reporting ==> PowerBuilder, Shell
	// Back end - Oracle
	// front end - React / Angular

	// REST SERVICES ==>WE NO NEED TO WRITE ANY WSDL, SCHEMA, XSD,XML, CONTRACT, AND
	// PREDEFINED DATA OBJECTS
	// no specific protocol like SOAP, TCP, UDP, It always run on the HTTP Common
	// protocol

	// 4 OPERATIONS ==> 4 VERBS ==>GET VERB  ==>GET THE DATA      //POST ==> CREATE
	// 							==>POST VERB ==>CREATE THE DATA   //PUT  ==> CREATE / UPDATE
	// 						    ==>PUT VERB  ==>UPDATE THE DATA
	//							==>DELETE VERB => DELETE THE DATA 
	
	//Spring boot came with little bit advance feature with JAX - RS Framework
	//Get operation ==>@Get ==> to call get verb
	//@RequestMapping ==>
	//@GetMapping ==> @GET + @RequestMapping
	//@PostMapping ==>@Post + @RequestMapping
	
	//Also, Spring boot has internally library called as JACKSON Library,  
	
	//which is used to convert java object to JSON Object and JSON Object to Java Object
	
	//Autowire service method
	@ Autowired 
	private TicketService ticketService;
	
	//Retrieval All Tickets
	
	@GetMapping(value="/all") //http:localhost:8080/tickets/all
	//ticketController.getTickets();
	//Output will be convert to JSON ..ie.. Iterable<Ticket> will be converted into  JSON Format

	public Iterable<Ticket> getTickets()
	{
		return ticketService.getAllTickets();
	}
	
	//Retrieval Specific Tickets

	//http:localhost:8080/tickets/all ==> All Tickets
	//http:localhost:8080/tickets/1   ==> select * from tb1_ticket where ticket_id = 1; 
	//http:localhost:8080/tickets/2   ==> select * from tb1_ticket where ticket_id = 2; 
	//Enclosing in {} ==>Representing a PathVariable
	@GetMapping(value="/{ticketId}")
	public Ticket getTicket(@PathVariable("ticketId") Integer ticketId)
	{
		return ticketService.getTicket(ticketId);
	}
	

	//Create Ticket
	@PostMapping(value="/create") //http:localhost:8080/tickets/create
	public Ticket createTicket(@RequestBody Ticket tickeObj)
	{
		return ticketService.createTicket(tickeObj);
	}
	//Update Ticket
	
	@PutMapping(value="/{ticketId}/{new Email}") //http:localhost:8080/tickets/1/pk@gmail.com
	public Ticket updateTicket(@PathVariable("ticketId") Integer ticketId, @PathVariable("new Email") String newEmail)
	{
		return ticketService.updateTicket(ticketId, newEmail);
	}
	
	//Delete Ticket
	@DeleteMapping(value="/{ticketId}") //http:localhost:8080/tickets/1
	public void deleteTicket(@PathVariable("ticketId") Integer ticketId)
	{
		ticketService.deleTicketById(ticketId);
	}
	
}
